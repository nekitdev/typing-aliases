{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>typing-aliases</code>","text":"<p>Various type aliases.</p>"},{"location":"#installing","title":"Installing","text":"<p>Python 3.7 or above is required.</p>"},{"location":"#pip","title":"pip","text":"<p>Installing the library with <code>pip</code> is quite simple:</p> <pre><code>$ pip install typing-aliases\n</code></pre> <p>Alternatively, the library can be installed from source:</p> <pre><code>$ git clone https://github.com/nekitdev/typing-aliases.git\n$ cd typing-aliases\n$ python -m pip install .\n</code></pre>"},{"location":"#poetry","title":"poetry","text":"<p>You can add <code>typing-aliases</code> as a dependency with the following command:</p> <pre><code>$ poetry add typing-aliases\n</code></pre> <p>Or by directly specifying it in the configuration like so:</p> <pre><code>[tool.poetry.dependencies]\ntyping-aliases = \"^1.1.1\"\n</code></pre> <p>Alternatively, you can add it directly from the source:</p> <pre><code>[tool.poetry.dependencies.typing-aliases]\ngit = \"https://github.com/nekitdev/typing-aliases.git\"\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>You can find the documentation here.</p>"},{"location":"#support","title":"Support","text":"<p>If you need support with the library, you can send an email or refer to the official Discord server.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>You can find the changelog here.</p>"},{"location":"#security-policy","title":"Security Policy","text":"<p>You can find the Security Policy of <code>typing-aliases</code> here.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you are interested in contributing to <code>typing-aliases</code>, make sure to take a look at the Contributing Guide, as well as the Code of Conduct.</p>"},{"location":"#license","title":"License","text":"<p><code>typing-aliases</code> is licensed under the MIT License terms. See License for details.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#111-2023-05-21","title":"1.1.1 (2023-05-21)","text":""},{"location":"changelog/#fixes","title":"Fixes","text":"<ul> <li>Fixed <code>RecursiveIterable[T]</code> docs.</li> </ul>"},{"location":"changelog/#110-2023-05-20","title":"1.1.0 (2023-05-20)","text":"<p>Overall rewrite.</p>"},{"location":"changelog/#100-2022-11-26","title":"1.0.0 (2022-11-26)","text":"<p>Initial release.</p>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement to conduct@nekit.dev.</p> <p>All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://contributor-covenant.org/version/2/1/code_of_conduct.</p> <p>Community Impact Guidelines were inspired by Mozilla's Code of Conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://contributor-covenant.org/faq. Translations are available at https://contributor-covenant.org/translations.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#typing_aliases.typing.AnyType","title":"<code>AnyType = Type[Any]</code>  <code>module-attribute</code>","text":"<p>Represents any types.</p>"},{"location":"reference/#typing_aliases.typing.EmptyTuple","title":"<code>EmptyTuple = Tuple[]</code>  <code>module-attribute</code>","text":"<p>Represents empty tuples <code>()</code>.</p>"},{"location":"reference/#typing_aliases.typing.Tuple1","title":"<code>Tuple1 = Tuple[T]</code>  <code>module-attribute</code>","text":"<p>Represents homogeneous 1-tuples <code>(T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.Tuple2","title":"<code>Tuple2 = Tuple[T, T]</code>  <code>module-attribute</code>","text":"<p>Represents homogeneous 2-tuples <code>(T, T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.Tuple3","title":"<code>Tuple3 = Tuple[T, T, T]</code>  <code>module-attribute</code>","text":"<p>Represents homogeneous 3-tuples <code>(T, T, T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.Tuple4","title":"<code>Tuple4 = Tuple[T, T, T, T]</code>  <code>module-attribute</code>","text":"<p>Represents homogeneous 4-tuples <code>(T, T, T, T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.Tuple5","title":"<code>Tuple5 = Tuple[T, T, T, T, T]</code>  <code>module-attribute</code>","text":"<p>Represents homogeneous 5-tuples <code>(T, T, T, T, T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.Tuple6","title":"<code>Tuple6 = Tuple[T, T, T, T, T, T]</code>  <code>module-attribute</code>","text":"<p>Represents homogeneous 6-tuples <code>(T, T, T, T, T, T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.Tuple7","title":"<code>Tuple7 = Tuple[T, T, T, T, T, T, T]</code>  <code>module-attribute</code>","text":"<p>Represents homogeneous 7-tuples <code>(T, T, T, T, T, T, T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.Tuple8","title":"<code>Tuple8 = Tuple[T, T, T, T, T, T, T, T]</code>  <code>module-attribute</code>","text":"<p>Represents homogeneous 8-tuples <code>(T, T, T, T, T, T, T, T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.Pair","title":"<code>Pair = Tuple[T, T]</code>  <code>module-attribute</code>","text":"<p>Represents homogeneous pairs <code>(T, T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.DynamicTuple","title":"<code>DynamicTuple = Tuple[T, Ellipsis]</code>  <code>module-attribute</code>","text":"<p>Represents homogeneous tuples of any length <code>(T, ...)</code>.</p>"},{"location":"reference/#typing_aliases.typing.AnyTuple","title":"<code>AnyTuple = DynamicTuple[Any]</code>  <code>module-attribute</code>","text":"<p>Represents any tuples <code>(Any, ...)</code>.</p>"},{"location":"reference/#typing_aliases.typing.AnyError","title":"<code>AnyError: TypeAlias = BaseException</code>  <code>module-attribute</code>","text":"<p>Represents any errors.</p>"},{"location":"reference/#typing_aliases.typing.AnyErrorType","title":"<code>AnyErrorType = Type[AnyError]</code>  <code>module-attribute</code>","text":"<p>Represents any error types.</p>"},{"location":"reference/#typing_aliases.typing.NormalError","title":"<code>NormalError: TypeAlias = Exception</code>  <code>module-attribute</code>","text":"<p>Represents normal errors.</p>"},{"location":"reference/#typing_aliases.typing.NormalErrorType","title":"<code>NormalErrorType = Type[NormalError]</code>  <code>module-attribute</code>","text":"<p>Represents normal error types.</p>"},{"location":"reference/#typing_aliases.typing.AnyErrorTypes","title":"<code>AnyErrorTypes = DynamicTuple[AnyErrorType]</code>  <code>module-attribute</code>","text":"<p>Represents tuples of any error types <code>(AnyErrorType, ...)</code>.</p>"},{"location":"reference/#typing_aliases.typing.NormalErrorTypes","title":"<code>NormalErrorTypes = DynamicTuple[NormalErrorType]</code>  <code>module-attribute</code>","text":"<p>Represents tuples of normal error types <code>(NormalErrorType, ...)</code>.</p>"},{"location":"reference/#typing_aliases.typing.AnyContextManager","title":"<code>AnyContextManager = ContextManager[Any]</code>  <code>module-attribute</code>","text":"<p>Represents any context managers.</p>"},{"location":"reference/#typing_aliases.typing.SimpleContextManager","title":"<code>SimpleContextManager = ContextManager[None]</code>  <code>module-attribute</code>","text":"<p>Represents simple context managers that do not return anything on entering.</p>"},{"location":"reference/#typing_aliases.typing.AnyAsyncContextManager","title":"<code>AnyAsyncContextManager = AsyncContextManager[Any]</code>  <code>module-attribute</code>","text":"<p>Represents any async context managers.</p>"},{"location":"reference/#typing_aliases.typing.SimpleAsyncContextManager","title":"<code>SimpleAsyncContextManager = AsyncContextManager[None]</code>  <code>module-attribute</code>","text":"<p>Represents simple async context managers that do not return anything on entering.</p>"},{"location":"reference/#typing_aliases.typing.DynamicCallable","title":"<code>DynamicCallable = Callable[Ellipsis, R]</code>  <code>module-attribute</code>","text":"<p>Represents dynamic callables <code>(...) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.AnyCallable","title":"<code>AnyCallable = DynamicCallable[Any]</code>  <code>module-attribute</code>","text":"<p>Represents any callables <code>(...) -&gt; Any</code>.</p>"},{"location":"reference/#typing_aliases.typing.Nullary","title":"<code>Nullary = Callable[[], R]</code>  <code>module-attribute</code>","text":"<p>Represents nullary functions <code>() -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.Unary","title":"<code>Unary = Callable[[T], R]</code>  <code>module-attribute</code>","text":"<p>Represents unary functions <code>(T) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.Binary","title":"<code>Binary = Callable[[T, U], R]</code>  <code>module-attribute</code>","text":"<p>Represents binary functions <code>(T, U) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.Ternary","title":"<code>Ternary = Callable[[T, U, V], R]</code>  <code>module-attribute</code>","text":"<p>Represents ternary functions <code>(T, U, V) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.Quaternary","title":"<code>Quaternary = Callable[[T, U, V, W], R]</code>  <code>module-attribute</code>","text":"<p>Represents quaternary functions <code>(T, U, V, W) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.Identity","title":"<code>Identity = Unary[T, T]</code>  <code>module-attribute</code>","text":"<p>Represents identity functions <code>(T) -&gt; T</code>.</p>"},{"location":"reference/#typing_aliases.typing.Parse","title":"<code>Parse = Unary[str, T]</code>  <code>module-attribute</code>","text":"<p>Represents parsing functions <code>(str) -&gt; T</code>.</p>"},{"location":"reference/#typing_aliases.typing.Inspect","title":"<code>Inspect = Unary[T, None]</code>  <code>module-attribute</code>","text":"<p>Represents inspect functions <code>(T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.ForEach","title":"<code>ForEach = Unary[T, None]</code>  <code>module-attribute</code>","text":"<p>Represents for-each functions <code>(T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.Validate","title":"<code>Validate = Unary[T, None]</code>  <code>module-attribute</code>","text":"<p>Represents validation functions <code>(T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.Predicate","title":"<code>Predicate = Unary[T, bool]</code>  <code>module-attribute</code>","text":"<p>Represents predicates <code>(T) -&gt; bool</code>.</p>"},{"location":"reference/#typing_aliases.typing.GenericPredicate","title":"<code>GenericPredicate = Callable[P, bool]</code>  <code>module-attribute</code>","text":"<p>Represents generic predicates <code>(P) -&gt; bool</code>.</p>"},{"location":"reference/#typing_aliases.typing.Compare","title":"<code>Compare = Binary[T, U, bool]</code>  <code>module-attribute</code>","text":"<p>Represents comparison functions <code>(T, U) -&gt; bool</code>.</p>"},{"location":"reference/#typing_aliases.typing.UnpackNullary","title":"<code>UnpackNullary = Unary[EmptyTuple, R]</code>  <code>module-attribute</code>","text":"<p>Represents unpacking nullary functions <code>(()) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.UnpackUnary","title":"<code>UnpackUnary = Unary[Tuple[T], R]</code>  <code>module-attribute</code>","text":"<p>Represents unpacking unary functions <code>((T)) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.UnpackBinary","title":"<code>UnpackBinary = Unary[Tuple[T, U], R]</code>  <code>module-attribute</code>","text":"<p>Represents unpacking binary functions <code>((T, U)) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.UnpackTernary","title":"<code>UnpackTernary = Unary[Tuple[T, U, V], R]</code>  <code>module-attribute</code>","text":"<p>Represents unpacking ternary functions <code>((T, U, V)) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.UnpackQuaternary","title":"<code>UnpackQuaternary = Unary[Tuple[T, U, V, W], R]</code>  <code>module-attribute</code>","text":"<p>Represents unpacking quaternary functions <code>((T, U, V, W)) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.Decorator","title":"<code>Decorator = Unary[F, G]</code>  <code>module-attribute</code>","text":"<p>Represents decorators <code>(F) -&gt; G</code>.</p>"},{"location":"reference/#typing_aliases.typing.DecoratorIdentity","title":"<code>DecoratorIdentity = Identity[F]</code>  <code>module-attribute</code>","text":"<p>Represents identity decorators <code>(F) -&gt; F</code>.</p>"},{"location":"reference/#typing_aliases.typing.TypeDecorator","title":"<code>TypeDecorator = Unary[C, D]</code>  <code>module-attribute</code>","text":"<p>Represents type decorators <code>(C) -&gt; D</code>.</p>"},{"location":"reference/#typing_aliases.typing.TypeDecoratorIdentity","title":"<code>TypeDecoratorIdentity = Identity[C]</code>  <code>module-attribute</code>","text":"<p>Represents identity type decorators <code>(C) -&gt; C</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncCallable","title":"<code>AsyncCallable = Callable[P, Awaitable[R]]</code>  <code>module-attribute</code>","text":"<p>Represents async callables <code>async (P) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.DynamicAsyncCallable","title":"<code>DynamicAsyncCallable = AsyncCallable[Ellipsis, R]</code>  <code>module-attribute</code>","text":"<p>Represents dynamic async callables <code>async (...) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.AnyAsyncCallable","title":"<code>AnyAsyncCallable = DynamicAsyncCallable[Any]</code>  <code>module-attribute</code>","text":"<p>Represents any async callables <code>async (...) -&gt; Any</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncNullary","title":"<code>AsyncNullary = Nullary[Awaitable[R]]</code>  <code>module-attribute</code>","text":"<p>Represents async nullary functions <code>async () -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncUnary","title":"<code>AsyncUnary = Unary[T, Awaitable[R]]</code>  <code>module-attribute</code>","text":"<p>Represents async unary functions <code>async (T) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncBinary","title":"<code>AsyncBinary = Binary[T, U, Awaitable[R]]</code>  <code>module-attribute</code>","text":"<p>Represents async binary functions <code>async (T, U) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncTernary","title":"<code>AsyncTernary = Ternary[T, U, V, Awaitable[R]]</code>  <code>module-attribute</code>","text":"<p>Represents async ternary functions <code>async (T, U, V) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncQuaternary","title":"<code>AsyncQuaternary = Quaternary[T, U, V, W, Awaitable[R]]</code>  <code>module-attribute</code>","text":"<p>Represents async quaternary functions <code>async (T, U, V, W) -&gt; R</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncIdentity","title":"<code>AsyncIdentity = AsyncUnary[T, T]</code>  <code>module-attribute</code>","text":"<p>Represents async identity functions <code>async (T) -&gt; T</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncParse","title":"<code>AsyncParse = AsyncUnary[str, T]</code>  <code>module-attribute</code>","text":"<p>Represents parsing functions <code>async (str) -&gt; T</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncInspect","title":"<code>AsyncInspect = AsyncUnary[T, None]</code>  <code>module-attribute</code>","text":"<p>Represents async inspect functions <code>async (T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncForEach","title":"<code>AsyncForEach = AsyncUnary[T, None]</code>  <code>module-attribute</code>","text":"<p>Represents async for-each functions <code>async (T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncValidate","title":"<code>AsyncValidate = AsyncUnary[T, None]</code>  <code>module-attribute</code>","text":"<p>Represents async validation functions <code>async (T)</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncPredicate","title":"<code>AsyncPredicate = AsyncUnary[T, bool]</code>  <code>module-attribute</code>","text":"<p>Represents async predicates <code>async (T) -&gt; bool</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncGenericPredicate","title":"<code>AsyncGenericPredicate = AsyncCallable[P, bool]</code>  <code>module-attribute</code>","text":"<p>Represents async generic predicates <code>async (P) -&gt; bool</code>.</p>"},{"location":"reference/#typing_aliases.typing.AsyncCompare","title":"<code>AsyncCompare = AsyncBinary[T, U, bool]</code>  <code>module-attribute</code>","text":"<p>Represents async comparison functions <code>async (T, U) -&gt; bool</code>.</p>"},{"location":"reference/#typing_aliases.typing.AnyIterable","title":"<code>AnyIterable = Union[AsyncIterable[T], Iterable[T]]</code>  <code>module-attribute</code>","text":"<p>Represents any iterable, async or not.</p>"},{"location":"reference/#typing_aliases.typing.AnyIterator","title":"<code>AnyIterator = Union[AsyncIterator[T], Iterator[T]]</code>  <code>module-attribute</code>","text":"<p>Represents any iterator, async or not.</p>"},{"location":"reference/#typing_aliases.typing.Selectors","title":"<code>Selectors = Iterable[bool]</code>  <code>module-attribute</code>","text":"<p>Represents selectors.</p>"},{"location":"reference/#typing_aliases.typing.AsyncSelectors","title":"<code>AsyncSelectors = AsyncIterable[bool]</code>  <code>module-attribute</code>","text":"<p>Represents async selectors.</p>"},{"location":"reference/#typing_aliases.typing.AnySelectors","title":"<code>AnySelectors = AnyIterable[bool]</code>  <code>module-attribute</code>","text":"<p>Represents any selectors, async or not.</p>"},{"location":"reference/#typing_aliases.typing.RecursiveIterable","title":"<code>RecursiveIterable = Union[T, Iterable['RecursiveIterable[T]']]</code>  <code>module-attribute</code>","text":"<p>Represents recursive iterables.</p>"},{"location":"reference/#typing_aliases.typing.RecursiveAsyncIterable","title":"<code>RecursiveAsyncIterable = Union[T, AsyncIterable['RecursiveAsyncIterable[T]']]</code>  <code>module-attribute</code>","text":"<p>Represents recursive async iterables.</p>"},{"location":"reference/#typing_aliases.typing.RecursiveAnyIterable","title":"<code>RecursiveAnyIterable = Union[T, AnyIterable['RecursiveAnyIterable[T]']]</code>  <code>module-attribute</code>","text":"<p>Represents recursive iterables, async or not.</p>"},{"location":"reference/#typing_aliases.typing.Pairs","title":"<code>Pairs = Iterable[Tuple[T, U]]</code>  <code>module-attribute</code>","text":"<p>Represents iterables of pairs <code>(T, U)</code>.</p>"},{"location":"reference/#typing_aliases.typing.StringDict","title":"<code>StringDict = Dict[str, T]</code>  <code>module-attribute</code>","text":"<p>Represents string dictionaries.</p>"},{"location":"reference/#typing_aliases.typing.StringMapping","title":"<code>StringMapping = Mapping[str, T]</code>  <code>module-attribute</code>","text":"<p>Represents string mappings.</p>"},{"location":"reference/#typing_aliases.typing.Attributes","title":"<code>Attributes = StringDict[Any]</code>  <code>module-attribute</code>","text":"<p>Represents attributes.</p>"},{"location":"reference/#typing_aliases.typing.Namespace","title":"<code>Namespace = StringDict[Any]</code>  <code>module-attribute</code>","text":"<p>Represents namespaces.</p>"},{"location":"reference/#typing_aliases.typing.Parameters","title":"<code>Parameters = StringMapping[Any]</code>  <code>module-attribute</code>","text":"<p>Represents parameters.</p>"},{"location":"reference/#typing_aliases.typing.Headers","title":"<code>Headers = StringMapping[Any]</code>  <code>module-attribute</code>","text":"<p>Represents headers.</p>"},{"location":"reference/#typing_aliases.typing.IntoDict","title":"<code>IntoDict = Union[Mapping[Q, T], Pairs[Q, T]]</code>  <code>module-attribute</code>","text":"<p>Represents types that can be converted into dictionaries.</p>"},{"location":"reference/#typing_aliases.typing.IntoMapping","title":"<code>IntoMapping = Union[Mapping[T, U], Pairs[T, U]]</code>  <code>module-attribute</code>","text":"<p>Represents types that can be converted into mappings.</p>"},{"location":"reference/#typing_aliases.typing.IntoStringDict","title":"<code>IntoStringDict = IntoDict[str, T]</code>  <code>module-attribute</code>","text":"<p>Represents types that can be converted into string dictionaries.</p>"},{"location":"reference/#typing_aliases.typing.IntoStringMapping","title":"<code>IntoStringMapping = IntoMapping[str, T]</code>  <code>module-attribute</code>","text":"<p>Represents types that can be converted into string mappings.</p>"},{"location":"reference/#typing_aliases.typing.IntoAttributes","title":"<code>IntoAttributes = IntoStringDict[Any]</code>  <code>module-attribute</code>","text":"<p>Represents types that can be converted into attributes.</p>"},{"location":"reference/#typing_aliases.typing.IntoNamespace","title":"<code>IntoNamespace = IntoStringDict[Any]</code>  <code>module-attribute</code>","text":"<p>Represents types that can be converted into namespaces.</p>"},{"location":"reference/#typing_aliases.typing.IntoParameters","title":"<code>IntoParameters = IntoStringMapping[Any]</code>  <code>module-attribute</code>","text":"<p>Represents types that can be converted into parameters.</p>"},{"location":"reference/#typing_aliases.typing.IntoHeaders","title":"<code>IntoHeaders = IntoStringMapping[Any]</code>  <code>module-attribute</code>","text":"<p>Represents types that can be converted into headers.</p>"},{"location":"reference/#typing_aliases.typing.IntoPath","title":"<code>IntoPath = Union[str, PathLike[str]]</code>  <code>module-attribute</code>","text":"<p>Represents types that can be converted into paths.</p>"},{"location":"reference/#typing_aliases.typing.Primitive","title":"<code>Primitive = Optional[Union[bool, int, float, str]]</code>  <code>module-attribute</code>","text":"<p>Represents primitive types.</p>"},{"location":"reference/#typing_aliases.typing.Payload","title":"<code>Payload = Union[Primitive, List['Payload'], StringDict['Payload']]</code>  <code>module-attribute</code>","text":"<p>Represents payloads.</p>"},{"location":"reference/#typing_aliases.typing.is_async_iterable","title":"<code>is_async_iterable(iterable: AnyIterable[T]) -&gt; TypeGuard[AsyncIterable[T]]</code>","text":"<p>Checks if an <code>AnyIterable[T]</code> is an <code>AsyncIterable[T]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>AnyIterable[T]</code> <p>The iterable to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[AsyncIterable[T]]</code> <p>Whether the iterable is an <code>AsyncIterable[T]</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_async_iterable(iterable: AnyIterable[T]) -&gt; TypeGuard[AsyncIterable[T]]:\n\"\"\"Checks if an [`AnyIterable[T]`][typing_aliases.typing.AnyIterable] is an\n    [`AsyncIterable[T]`][typing.AsyncIterable].\n\n    Arguments:\n        iterable: The iterable to check.\n\n    Returns:\n        Whether the iterable is an [`AsyncIterable[T]`][typing.AsyncIterable].\n    \"\"\"\n    return is_instance(iterable, AsyncIterable)\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_iterable","title":"<code>is_iterable(iterable: AnyIterable[T]) -&gt; TypeGuard[Iterable[T]]</code>","text":"<p>Checks if an <code>AnyIterable[T]</code> is an <code>Iterable[T]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>AnyIterable[T]</code> <p>The iterable to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[Iterable[T]]</code> <p>Whether the iterable is an <code>Iterable[T]</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_iterable(iterable: AnyIterable[T]) -&gt; TypeGuard[Iterable[T]]:\n\"\"\"Checks if an [`AnyIterable[T]`][typing_aliases.typing.AnyIterable] is an\n    [`Iterable[T]`][typing.Iterable].\n\n    Arguments:\n        iterable: The iterable to check.\n\n    Returns:\n        Whether the iterable is an [`Iterable[T]`][typing.Iterable].\n    \"\"\"\n    return is_instance(iterable, Iterable)\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_async_iterator","title":"<code>is_async_iterator(iterator: AnyIterator[T]) -&gt; TypeGuard[AsyncIterator[T]]</code>","text":"<p>Checks if an <code>AnyIterator[T]</code> is an <code>AsyncIterator[T]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>iterator</code> <code>AnyIterator[T]</code> <p>The iterator to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[AsyncIterator[T]]</code> <p>Whether the iterator is an <code>AsyncIterator[T]</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_async_iterator(iterator: AnyIterator[T]) -&gt; TypeGuard[AsyncIterator[T]]:\n\"\"\"Checks if an [`AnyIterator[T]`][typing_aliases.typing.AnyIterator] is an\n    [`AsyncIterator[T]`][typing.AsyncIterator].\n\n    Arguments:\n        iterator: The iterator to check.\n\n    Returns:\n        Whether the iterator is an [`AsyncIterator[T]`][typing.AsyncIterator].\n    \"\"\"\n    return is_instance(iterator, AsyncIterator)\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_iterator","title":"<code>is_iterator(iterator: AnyIterator[T]) -&gt; TypeGuard[Iterator[T]]</code>","text":"<p>Checks if an <code>AnyIterator[T]</code> is an <code>Iterator[T]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>iterator</code> <code>AnyIterator[T]</code> <p>The iterator to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[Iterator[T]]</code> <p>Whether the iterator is an <code>Iterator[T]</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_iterator(iterator: AnyIterator[T]) -&gt; TypeGuard[Iterator[T]]:\n\"\"\"Checks if an [`AnyIterator[T]`][typing_aliases.typing.AnyIterator] is an\n    [`Iterator[T]`][typing.Iterator].\n\n    Arguments:\n        iterator: The iterator to check.\n\n    Returns:\n        Whether the iterator is an [`Iterator[T]`][typing.Iterator].\n    \"\"\"\n    return is_instance(iterator, Iterator)\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_none","title":"<code>is_none(item: Any) -&gt; TypeGuard[None]</code>","text":"<p>Checks if the given <code>item</code> is <code>None</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[None]</code> <p>Whether the given item is <code>None</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_none(item: Any) -&gt; TypeGuard[None]:\n\"\"\"Checks if the given `item` is [`None`][None].\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the given item is [`None`][None].\n    \"\"\"\n    return item is None\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_not_none","title":"<code>is_not_none(item: Optional[T]) -&gt; TypeGuard[T]</code>","text":"<p>Checks if the given <code>item</code> is not <code>None</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Optional[T]</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[T]</code> <p>Whether the given item is not <code>None</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_not_none(item: Optional[T]) -&gt; TypeGuard[T]:\n\"\"\"Checks if the given `item` is *not* [`None`][None].\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the given item is *not* [`None`][None].\n    \"\"\"\n    return item is not None\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_int","title":"<code>is_int(item: Any) -&gt; TypeGuard[int]</code>","text":"<p>Checks if the given item is of type <code>int</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[int]</code> <p>Whether the given item is of type <code>int</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_int(item: Any) -&gt; TypeGuard[int]:\n\"\"\"Checks if the given item is of type [`int`][int].\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the given item is of type [`int`][int].\n    \"\"\"\n    return is_instance(item, int)\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_float","title":"<code>is_float(item: Any) -&gt; TypeGuard[float]</code>","text":"<p>Checks if the given item is of type <code>float</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[float]</code> <p>Whether the given item is of type <code>float</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_float(item: Any) -&gt; TypeGuard[float]:\n\"\"\"Checks if the given item is of type [`float`][float].\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the given item is of type [`float`][float].\n    \"\"\"\n    return is_instance(item, float)\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_bytes","title":"<code>is_bytes(item: Any) -&gt; TypeGuard[bytes]</code>","text":"<p>Checks if the given item is of type <code>bytes</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[bytes]</code> <p>Whether the given item is of type <code>bytes</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_bytes(item: Any) -&gt; TypeGuard[bytes]:\n\"\"\"Checks if the given item is of type [`bytes`][bytes].\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the given item is of type [`bytes`][bytes].\n    \"\"\"\n    return is_instance(item, bytes)\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_string","title":"<code>is_string(item: Any) -&gt; TypeGuard[str]</code>","text":"<p>Checks if the given item is of type <code>str</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[str]</code> <p>Whether the given item is of type <code>str</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_string(item: Any) -&gt; TypeGuard[str]:\n\"\"\"Checks if the given item is of type [`str`][str].\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the given item is of type [`str`][str].\n    \"\"\"\n    return is_instance(item, str)\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_slice","title":"<code>is_slice(item: Any) -&gt; TypeGuard[slice]</code>","text":"<p>Checks if the given item is of type <code>slice</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[slice]</code> <p>Whether the given item is of type <code>slice</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_slice(item: Any) -&gt; TypeGuard[slice]:\n\"\"\"Checks if the given item is of type [`slice`][slice].\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the given item is of type [`slice`][slice].\n    \"\"\"\n    return is_instance(item, slice)\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_range","title":"<code>is_range(item: Any) -&gt; TypeGuard[range]</code>","text":"<p>Checks if the given item is of type <code>range</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[range]</code> <p>Whether the given item is of type <code>range</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_range(item: Any) -&gt; TypeGuard[range]:\n\"\"\"Checks if the given item is of type [`range`][range].\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the given item is of type [`range`][range].\n    \"\"\"\n    return is_instance(item, range)\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_true","title":"<code>is_true(item: Any) -&gt; TypeGuard[Literal[True]]</code>","text":"<p>Checks if the given <code>item</code> is <code>True</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[Literal[True]]</code> <p>Whether the given item is <code>True</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_true(item: Any) -&gt; TypeGuard[Literal[True]]:\n\"\"\"Checks if the given `item` is [`True`][True].\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the given item is [`True`][True].\n    \"\"\"\n    return item is True\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_false","title":"<code>is_false(item: Any) -&gt; TypeGuard[Literal[False]]</code>","text":"<p>Checks if the given <code>item</code> is <code>False</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[Literal[False]]</code> <p>Whether the given item is <code>False</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_false(item: Any) -&gt; TypeGuard[Literal[False]]:\n\"\"\"Checks if the given `item` is [`False`][False].\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the given item is [`False`][False].\n    \"\"\"\n    return item is False\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_bool","title":"<code>is_bool(item: Any) -&gt; TypeGuard[bool]</code>","text":"<p>Checks if the given item is of type <code>bool</code>.</p> <p>This is equivalent to:</p> <pre><code>is_true(item) or is_false(item)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <p>Returns:</p> Type Description <code>TypeGuard[bool]</code> <p>Whether the given item is of type <code>bool</code>.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_bool(item: Any) -&gt; TypeGuard[bool]:\n\"\"\"Checks if the given item is of type [`bool`][bool].\n\n    This is equivalent to:\n\n    ```python\n    is_true(item) or is_false(item)\n    ```\n\n    Arguments:\n        item: The item to check.\n\n    Returns:\n        Whether the given item is of type [`bool`][bool].\n    \"\"\"\n    return is_true(item) or is_false(item)\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_same_type","title":"<code>is_same_type(item: Any, other: T) -&gt; TypeGuard[T]</code>","text":"<p>Checks if the item is of the same type <code>T</code> as the other item.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <code>other</code> <code>T</code> <p>The other item to check against.</p> required <p>Returns:</p> Type Description <code>TypeGuard[T]</code> <p>Whether the item is of the same type <code>T</code> as the other item.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_same_type(item: Any, other: T) -&gt; TypeGuard[T]:\n\"\"\"Checks if the item is of the same type `T` as the other item.\n\n    Arguments:\n        item: The item to check.\n        other: The other item to check against.\n\n    Returns:\n        Whether the item is of the same type `T` as the other item.\n    \"\"\"\n    return type(item) is type(other)\n</code></pre>"},{"location":"reference/#typing_aliases.typing.is_same_or_sub_type","title":"<code>is_same_or_sub_type(item: Any, other: T) -&gt; TypeGuard[T]</code>","text":"<p>Checks if the item is of the sub- or same type <code>T</code> as the other item.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>Any</code> <p>The item to check.</p> required <code>other</code> <code>T</code> <p>The other item to check against.</p> required <p>Returns:</p> Type Description <code>TypeGuard[T]</code> <p>Whether the item is of the sub- or same type <code>T</code> as the other item.</p> Source code in <code>typing_aliases/typing.py</code> <pre><code>def is_same_or_sub_type(item: Any, other: T) -&gt; TypeGuard[T]:\n\"\"\"Checks if the item is of the sub- or same type `T` as the other item.\n\n    Arguments:\n        item: The item to check.\n        other: The other item to check against.\n\n    Returns:\n        Whether the item is of the sub- or same type `T` as the other item.\n    \"\"\"\n    return is_instance(item, type(other))\n</code></pre>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#reporting","title":"Reporting","text":"<p>Thank you for taking the time to responsibly disclose any problems you find.</p> <p>Do not file public issues as they are open for everyone to see!</p> <p>All security vulnerabilities in <code>typing-aliases</code> should be reported by email to security@nekit.dev. Your report will be acknowledged within 24 hours, and you will receive a more detailed response within 48 hours indicating the next steps in handling your report.</p> <p>You can encrypt your report using our public key: <code>BB2D8194464001E0B9B60EB8741A1EAD20FFDE8A</code>. This key is also available on MIT's Key Server and reproduced below.</p> <p>After the initial reply to your report, the core team will try to keep you informed of the progress being made towards a fix and official announcement. These updates will be sent at least every five days. In reality, this is more likely to be every 24-48 hours.</p>"},{"location":"security/#disclosure-policy","title":"Disclosure Policy","text":"<p><code>typing-aliases</code> has a 5-step disclosure process:</p> <ol> <li> <p>The security report is received and is assigned a primary handler.    This person will coordinate the fix and release process.</p> </li> <li> <p>The problem is confirmed and a list of all affected versions is determined.</p> </li> <li> <p>Code is audited to find any potential similar problems.</p> </li> <li> <p>Fixes are prepared for all releases which are still under maintenance.    These fixes are not committed to the public repository but rather    held locally pending the announcement.</p> </li> <li> <p>On the embargo date, the changes are pushed to the public repository    and new builds are deployed.</p> </li> </ol> <p>This process can take some time, especially when coordination is required with maintainers of other projects. Every effort will be made to handle the issue in as timely a manner as possible, however it is important that we follow the release process above to ensure that the disclosure is handled in a consistent manner.</p>"},{"location":"security/#security-key","title":"Security Key","text":"<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\n1oYi7ft0FnZ67Wnk5+E+\n=VRe2\n-----END PGP PUBLIC KEY BLOCK-----\n</code></pre>"},{"location":"security/#attribution","title":"Attribution","text":"<p>This Security Policy is adapted from Rust's Security Policy.</p>"}]}